openapi: 3.0.3
info:
  title: KidManTree Backend API
  description: Comprehensive backend API for a mental health and content platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@mentalhealthplatform.com

servers:
  - url: https://kidmantree-backend-g2la.onrender.com/api
    description: Development server 
  - url: https://api.manmitr.com/api
    description: Production server
  - url: http://localhost:8000/api
    description: local server
    

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        contact:
          type: string
        age:
          type: integer
        role:
          type: string
          enum: [user, admin, superadmin, psychologist, user-panel]
        isEmailVerified:
          type: boolean
        isContactVerified:
          type: boolean
        isActive:
          type: boolean
        profile:
          type: object
          properties:
            avatar:
              type: string
            bio:
              type: string
            interests:
              type: array
              items:
                type: string
        modules:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              route:
                type: string
              permissions:
                type: object
                properties:
                  read:
                    type: boolean
                  write:
                    type: boolean
                  delete:
                    type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time


    Podcast:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        time:
          type: string
        youtubeLink:
          type: string
        thumbnailPath:
          type: string
        thumbnailUrl:
          type: string
        isActive:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MoodLog:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        emoji:
          type: string
        scale:
          type: integer
          minimum: 1
          maximum: 5
        emotions:
          type: array
          items:
            type: string
        notes:
          type: string
        triggers:
          type: array
          items:
            type: string
        logDate:
          type: string
          format: date-time

    FeelingToday:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        feeling:
          type: string
          enum: [excellent, good, okay, not-great, unsatisfied]
        emoji:
          type: string
        notes:
          type: string
        date:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Psychologist:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        degree:
          type: string
        experience:
          type: integer
        about:
          type: string
        rating:
          type: number
        specializations:
          type: array
          items:
            type: string
        city:
          type: string
        contactNumber:
          type: string
        role:
          type: string
          enum: [psychologist, counselor]
        aadharNumber:
          type: string
        aadharDocument:
          type: string
        uploadDocuments:
          type: array
          items:
            type: string
        schedule:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
                enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
              startTime:
                type: string
              endTime:
                type: string
              isAvailable:
                type: boolean
        isActive:
          type: boolean
        status:
          type: string
          enum: [pending, selected, rejected]
        accountActivatedAt:
          type: string
          format: date-time
        profileImage:
          type: string
        languages:
          type: array
          items:
            type: string
        sessionRate:
          type: number
        totalSessions:
          type: integer
        reviews:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              rating:
                type: integer
                minimum: 1
                maximum: 5
              comment:
                type: string
              createdAt:
                type: string
                format: date-time
        averageRating:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Appointment:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        psychologist:
          $ref: '#/components/schemas/Psychologist'
        dateTime:
          type: string
          format: date-time
        duration:
          type: integer
        status:
          type: string
          enum: [scheduled, completed, cancelled, no-show]
        notes:
          type: string

    Poll:
      type: object
      properties:
        _id:
          type: string
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              votes:
                type: array
        creator:
          $ref: '#/components/schemas/User'
        totalVotes:
          type: integer
        expiresAt:
          type: string
          format: date-time

    Question:
      type: object
      properties:
        _id:
          type: string
          description: Question ID
        text:
          type: string
          description: Question text
          example: "How often do you feel anxious?"
        type:
          type: string
          enum: [multiple-choice, rating, text]
          default: multiple-choice
          description: Type of question
        options:
          type: array
          items:
            type: string
          description: Available options for multiple-choice questions
          example: ["Never", "Sometimes", "Often", "Always"]
        required:
          type: boolean
          default: true
          description: Whether the question is required

    Questionnaire:
      type: object
      properties:
        _id:
          type: string
          description: Questionnaire ID
        title:
          type: string
          default: "Mental Health Assessment"
          description: Questionnaire title
          example: "Mental Health Assessment"
        description:
          type: string
          default: "Please answer the following questions to help us understand your current mental health status."
          description: Questionnaire description
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          description: List of questions
        isActive:
          type: boolean
          default: true
          description: Whether the questionnaire is currently active
        version:
          type: number
          default: 1
          description: Questionnaire version
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuestionnaireResponseItem:
      type: object
      properties:
        questionId:
          type: string
          description: Reference to the question ID
          example: "64f8a1b2c3d4e5f6789012ab"
        answer:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: Answer to the question (can be string, number, or boolean)
          example: "Sometimes"

    QuestionnaireResponse:
      type: object
      properties:
        _id:
          type: string
          description: Response ID
        user:
          type: string
          description: User ID who submitted the response
        questionnaire:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Questionnaire'
          description: Reference to the questionnaire (can be populated)
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireResponseItem'
          description: Array of question responses
        score:
          type: number
          description: Calculated score from responses
          example: 12
        category:
          type: string
          enum: [low, moderate, high, severe]
          description: Risk category based on score
          example: "moderate"
        recommendations:
          type: array
          items:
            type: string
          description: Recommended actions based on the assessment
          example: ["Try guided meditation sessions", "Consider talking to friends or family"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuestionnaireSubmissionRequest:
      type: object
      required: [questionnaireId, responses]
      properties:
        questionnaireId:
          type: string
          description: ID of the questionnaire being submitted
          example: "64f8a1b2c3d4e5f6789012ab"
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireResponseItem'
          description: Array of question responses

    CreateQuestionnaireRequest:
      type: object
      required: [title, questions]
      properties:
        title:
          type: string
          description: Questionnaire title
          example: "Mental Health Assessment"
        description:
          type: string
          description: Questionnaire description
          example: "Please answer the following questions to help us understand your current mental health status."
        questions:
          type: array
          items:
            type: object
            required: [text]
            properties:
              text:
                type: string
                description: Question text
                example: "How often do you feel anxious?"
              type:
                type: string
                enum: [multiple-choice, rating, text]
                default: multiple-choice
              options:
                type: array
                items:
                  type: string
                description: Options for multiple-choice questions
                example: ["Never", "Sometimes", "Often", "Always"]
              required:
                type: boolean
                default: true

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        message:
          type: string
        errors:
          type: array
          items:
            type: object
        timestamp:
          type: string
          format: date-time

    MusicCategory:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        thumbnailPath:
          type: string
        createdBy:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Music:
      type: object
      properties:
        _id:
          type: string
        category:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/MusicCategory'
        title:
          type: string
        genre:
          type: string
        audioPath:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        data:
          type: object
          nullable: true
          example: null
        message:
          type: string
        errors:
          type: array
          items:
            type: object
        timestamp:
          type: string
          format: date-time

      #   Support:
      # type: object
      # properties:
      #   _id:
      #     type: string
      #   subject:
      #     type: string
      #   description:
      #     type: string
      #   status:
      #     type: string
      #     enum: [open, inprogress, resolved]
      #   priority:
      #     type: string
      #     enum: [low, medium, high, urgent]
      #   createdBy:
      #     oneOf:
      #       - type: string
      #       - $ref: '#/components/schemas/User'
      #   assignedTo:
      #     oneOf:
      #       - type: string
      #       - $ref: '#/components/schemas/User'
      #   resolvedAt:
      #     type: string
      #     format: date-time
      #   resolvedBy:
      #     oneOf:
      #       - type: string
      #       - $ref: '#/components/schemas/User'
      #   adminNotes:
      #     type: string
      #   createdAt:
      #     type: string
      #     format: date-time
      #   updatedAt:
      #     type: string
      #     format: date-time

    Support:
      type: object
      properties:
        _id:
          type: string
        subject:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [open, inprogress, resolved]
        createdBy:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/User'
        resolvedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

      Poll:
      type: object
      properties:
        _id:
          type: string
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              votes:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      oneOf:
                        - type: string
                        - $ref: '#/components/schemas/User'
                    createdAt:
                      type: string
                      format: date-time
              voteCount:
                type: integer
              percentage:
                type: string
        creator:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/User'
        expiresAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        isDeleted:
          type: boolean
        visibility:
          type: string
          enum: [public, private]
        totalVotes:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  
    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 5000
        author:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/User'
        moodTag:
          type: string
          enum: [Crying, Sad, Exhausted, Calm, Happy, Chearful, Energetic, Confused, Anxious]
        isAnonymous:
          type: boolean
          default: false
        likes:
          type: array
          items:
            type: object
            properties:
              user:
                oneOf:
                  - type: string
                  - $ref: '#/components/schemas/User'
              createdAt:
                type: string
                format: date-time
        unlikes:
          type: array
          items:
            type: object
            properties:
              user:
                oneOf:
                  - type: string
                  - $ref: '#/components/schemas/User'
              createdAt:
                type: string
                format: date-time
        comments:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/Comment'
        isDeleted:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
        visibility:
          type: string
          enum: [public, private, friends]
          default: public
        postImage:
          type: string
          description: Relative path of uploaded post image
        postImageUrl:
          type: string
          description: Absolute URL for accessing the post image
        likesCount:
          type: integer
          readOnly: true
        unlikesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        author:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/User'
        post:
          type: string
        isAnonymous:
          type: boolean
          default: false
        isDeleted:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time





paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, contact, age]
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "Password123!"
                contact:
                  type: string
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 13
                  example: 25
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'

  /auth/verify-contact-otp:
    post:
      tags: [Auth]
      summary: Verify contact OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: Contact verified successfully
        400:
          description: Invalid or expired OTP

  /auth/verify-email-otp:
    post:
      tags: [Auth]
      summary: Verify email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: Email verified successfully
        400:
          description: Invalid or expired OTP

  /auth/resend-otp:
    post:
      tags: [Auth]
      summary: Resend OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                  enum: [email, contact]
                  example: "email"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: OTP resent successfully
        400:
          description: Invalid request

  /auth/parent/init:
    post:
      tags: [Auth]
      summary: Initialize parent consent verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [parentEmail, parentContact, tempToken]
              properties:
                parentEmail:
                  type: string
                  format: email
                  example: "parent@example.com"
                parentContact:
                  type: string
                  example: "+1234567890"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent verification initiated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          parentEmail:
                            type: string
                            example: "parent@example.com"
                          parentContact:
                            type: string
                            example: "+123****890"
                          tempToken:
                            type: string
                            example: "temp_token_12345"
        400:
          description: Invalid request or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/verify-email-otp:
    post:
      tags: [Auth]
      summary: Verify parent email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp, tempToken]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent email verification successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Parent email verified successfully"
        400:
          description: Invalid OTP or verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/verify-contact-otp:
    post:
      tags: [Auth]
      summary: Verify parent contact OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp, tempToken]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent contact verification successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - type: object
                            properties:
                              token:
                                type: string
                                example: "jwt_token_here"
                              user:
                                $ref: '#/components/schemas/User'
                              accountActivated:
                                type: boolean
                                example: true
                              autoLogin:
                                type: boolean
                                example: true
                          - type: object
                            nullable: true
                      message:
                        type: string
                        examples:
                          account_activated:
                            value: "Parent consent completed. Account activated and logged in successfully."
                          contact_verified:
                            value: "Parent contact verified successfully"
        400:
          description: Invalid OTP or verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/resend-otp:
    post:
      tags: [Auth]
      summary: Resend parent OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, tempToken]
              properties:
                type:
                  type: string
                  enum: [email, contact]
                  example: "email"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: OTP resent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        examples:
                          email_resent:
                            value: "Parent email OTP resent successfully"
                          contact_resent:
                            value: "Parent contact OTP resent successfully"
        400:
          description: Invalid request or OTP type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/psychologist/invite:
    post:
      tags: [Auth]
      summary: Invite psychologist (Admin/Superadmin only)
      description: Send an invitation email to a psychologist to join the platform
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "psychologist@example.com"
      responses:
        200:
          description: Psychologist invitation sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          email:
                            type: string
                            example: "psychologist@example.com"
                      message:
                        type: string
                        example: "Psychologist invitation sent successfully"
        400:
          description: Invalid request or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/psychologist/verify-invite:
    get:
      tags: [Auth]
      summary: Get psychologist invite verification page
      description: Display the psychologist registration form (typically used in frontend)
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Invitation token from email
      responses:
        200:
          description: Invitation page loaded successfully
        400:
          description: Invalid or expired invitation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Auth]
      summary: Complete psychologist registration
      description: Complete psychologist account creation using invitation token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Invitation token from email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password, name]
              properties:
                password:
                  type: string
                  format: password
                  example: "SecurePassword123!"
                name:
                  type: string
                  example: "Dr. Jane Smith"
                contact:
                  type: string
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 18
                  example: 35
                degree:
                  type: string
                  example: "PhD in Clinical Psychology"
                experience:
                  type: integer
                  minimum: 0
                  example: 10
                about:
                  type: string
                  example: "Specialized in anxiety and depression treatment"
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                  example: ["Anxiety", "Depression", "PTSD"]
      responses:
        200:
          description: Psychologist account created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          psychologistProfile:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist account created successfully"
        400:
          description: Invalid request, expired token, or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Auth]
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: "Profile retrieved successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Initiate password reset with OTP
      description: Send OTP to user's email address for password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "superadmin@gmail.com"
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            example: true
                          message:
                            type: string
                            example: "OTP has been sent to your email address"
                      message:
                        type: string
                        example: "OTP has been sent to your email address"
        400:
          description: Invalid request or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password using OTP
      description: Reset user password using OTP received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, otp, newPassword, confirmPassword]
              properties:
                email:
                  type: string
                  format: email
                  example: "superadmin@gmail.com"
                otp:
                  type: string
                  example: "123456"
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: "NewSecurePassword123!"
                confirmPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: "NewSecurePassword123!"
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            example: true
                          message:
                            type: string
                            example: "Password has been reset successfully"
                      message:
                        type: string
                        example: "Password has been reset successfully"
        400:
          description: Invalid OTP, expired OTP, password mismatch, or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags: [Auth]
      summary: Change password (authenticated users)
      description: Change password for authenticated users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "CurrentPassword123!"
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: "NewSecurePassword123!"
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          success:
                            type: boolean
                            example: true
                          message:
                            type: string
                            example: "Password changed successfully"
                      message:
                        type: string
                        example: "Password changed successfully"
        400:
          description: Invalid current password or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists:
    get:
      tags: [Psychologists]
      summary: Get all psychologists
      description: Retrieve a paginated list of active psychologists with optional filtering
      parameters:
        - name: specialization
          in: query
          description: Filter by specialization
          schema:
            type: string
            enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
        - name: search
          in: query
          description: Search by name or specializations
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of psychologists per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          description: Psychologists retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologists:
                            type: array
                            items:
                              $ref: '#/components/schemas/Psychologist'
                          pagination:
                            type: object
                            properties:
                              currentPage:
                                type: integer
                              totalPages:
                                type: integer
                              totalItems:
                                type: integer
                      message:
                        type: string
                        example: "Psychologists retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Psychologists]
      summary: Create psychologist (Admin/Superadmin only)
      description: Create a psychologist user and profile. Sends login credentials via email. Psychologists log in using the standard `/auth/login` route.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, password, degree, experience, city, contactNumber, aadharNumber, aadharDocument]
              properties:
                firstName:
                  type: string
                  example: "Jane"
                lastName:
                  type: string
                  example: "Smith"
                email:
                  type: string
                  format: email
                  example: "jane.smith@example.com"
                password:
                  type: string
                  format: password
                  example: "TempPass@123"
                degree:
                  type: string
                  example: "PhD in Clinical Psychology"
                experience:
                  type: integer
                  minimum: 0
                  example: 10
                about:
                  type: string
                  example: "Specialized in anxiety and depression treatment"
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                  example: ["Anxiety", "Depression"]
                languages:
                  type: array
                  items:
                    type: string
                  example: ["English", "Hindi"]
                sessionRate:
                  type: number
                  minimum: 0
                  example: 150
                city:
                  type: string
                  example: "Mumbai"
                contactNumber:
                  type: string
                  example: "+919876543210"
                role:
                  type: string
                  enum: [psychologist, counselor]
                  default: psychologist
                  example: "psychologist"
                aadharNumber:
                  type: string
                  pattern: "^[0-9]{12}$"
                  example: "123456789012"
                aadharDocument:
                  type: string
                  example: "https://example.com/documents/aadhar.pdf"
                uploadDocuments:
                  type: array
                  items:
                    type: string
                  example: ["https://example.com/documents/degree.pdf", "https://example.com/documents/license.pdf"]
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                        example: "09:00"
                      endTime:
                        type: string
                        example: "17:00"
                      isAvailable:
                        type: boolean
                        default: true
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                  example: ["English", "Spanish"]
                sessionRate:
                  type: number
                  minimum: 0
                  example: 150
      responses:
        201:
          description: Psychologist user and profile created. Credentials emailed.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist created and credentials emailed"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/public/apply:
    post:
      tags: [Psychologists]
      summary: Public application to become psychologist/counselor
      description: Submit an application; admin will review and set status. Created profile status is pending.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, degree, experience, city, contactNumber, aadharNumber, aadharDocument]
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                degree:
                  type: string
                experience:
                  type: integer
                  minimum: 0
                about:
                  type: string
                specializations:
                  type: array
                  items:
                    type: string
                languages:
                  type: array
                  items:
                    type: string
                sessionRate:
                  type: number
                city:
                  type: string
                contactNumber:
                  type: string
                role:
                  type: string
                  enum: [psychologist, counselor]
                aadharNumber:
                  type: string
                aadharDocument:
                  type: string
                uploadDocuments:
                  type: array
                  items:
                    type: string
                schedule:
                  type: array
                  items:
                    type: object
                profileImage:
                  type: string
      responses:
        201:
          description: Application submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          applicationId:
                            type: string
                          status:
                            type: string
                            enum: [pending, selected, rejected]
                      message:
                        type: string
                        example: Application submitted successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/admin:
    get:
      tags: [Psychologists]
      summary: Admin list psychologists/applications
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, selected, rejected]
        - name: role
          in: query
          schema:
            type: string
            enum: [psychologist, counselor]
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Psychologists retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/admin/{id}:
    get:
      tags: [Psychologists]
      summary: Admin get single psychologist/application
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Psychologist retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/{id}/status:
    put:
      tags: [Psychologists]
      summary: Admin update psychologist status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, selected, rejected]
      responses:
        200:
          description: Status updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                          generatedPassword:
                            type: string
                            nullable: true

  /psychologists/{id}/reviews:
    get:
      tags: [Psychologists]
      summary: Get reviews for psychologist (public)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Reviews retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Psychologists]
      summary: Create/update my review for psychologist (Users only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        200:
          description: Review saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /psychologists/{id}:
    get:
      tags: [Psychologists]
      summary: Get psychologist by ID
      description: Retrieve detailed information about a specific psychologist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      responses:
        200:
          description: Psychologist retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist retrieved successfully"
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Psychologists]
      summary: Update psychologist (Admin/Superadmin only)
      description: Update psychologist profile information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                degree:
                  type: string
                experience:
                  type: integer
                  minimum: 0
                about:
                  type: string
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                      endTime:
                        type: string
                      isAvailable:
                        type: boolean
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                sessionRate:
                  type: number
                  minimum: 0
      responses:
        200:
          description: Psychologist updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist updated successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Psychologists]
      summary: Deactivate psychologist (Admin/Superadmin only)
      description: Deactivate a psychologist account and profile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      responses:
        200:
          description: Psychologist deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Psychologist deactivated successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/profile/me:
    get:
      tags: [Psychologists]
      summary: Get my psychologist profile
      description: Retrieve the authenticated psychologist's own profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Psychologist profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist profile retrieved successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Psychologists]
      summary: Update my psychologist profile
      description: Update the authenticated psychologist's own profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                degree:
                  type: string
                experience:
                  type: integer
                  minimum: 0
                about:
                  type: string
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                      endTime:
                        type: string
                      isAvailable:
                        type: boolean
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                sessionRate:
                  type: number
                  minimum: 0
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Profile updated successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Psychologists]
      summary: Deactivate my psychologist account
      description: Deactivate the authenticated psychologist's own account and profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Account deactivated successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /moods/log:
    post:
      tags: [Moods]
      summary: Log mood entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [emoji, scale]
              properties:
                emoji:
                  type: string
                  example: "😊"
                scale:
                  type: integer
                  minimum: 1
                  maximum: 5
                emotions:
                  type: array
                  items:
                    type: string
                notes:
                  type: string
                triggers:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Mood logged successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          moodLog:
                            $ref: '#/components/schemas/MoodLog'
                      message:
                        type: string
                        example: "Mood logged successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /moods/history:
    get:
      tags: [Moods]
      summary: Get mood history
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for filtering mood logs
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering mood logs
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Number of mood logs to return
          schema:
            type: integer
            default: 30
            minimum: 1
      responses:
        200:
          description: Mood history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          moodLogs:
                            type: array
                            items:
                              $ref: '#/components/schemas/MoodLog'
                      message:
                        type: string
                        example: "Mood history retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


# ----------------------------------------------------- Feelings api endpoints -----------------------------------------------------



  /feelings/today:
    post:
      tags: [Feelings]
      summary: Submit or update today's feeling
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [feeling, emoji]
              properties:
                feeling:
                  type: string
                  enum: [excellent, good, okay, not-great, unsatisfied]
                  example: "good"
                emoji:
                  type: string
                  example: "😊"
                notes:
                  type: string
                  maxLength: 500
      responses:
        201:
          description: Today's feeling submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Today's feeling submitted"
        200:
          description: Today's feeling updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Today's feeling updated"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Feelings]
      summary: Get today's feeling
      security:
        - BearerAuth: []
      responses:
        200:
          description: Today's feeling retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            oneOf:
                              - $ref: '#/components/schemas/FeelingToday'
                              - type: null
                          hasSubmittedToday:
                            type: boolean
                      message:
                        type: string
                        example: "Today's feeling retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feelings/history:
    get:
      tags: [Feelings]
      summary: Get feeling history
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of feelings to return
          schema:
            type: integer
            default: 30
            minimum: 1
      responses:
        200:
          description: Feeling history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feelings:
                            type: array
                            items:
                              $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Feeling history retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



# ----------------------------------------------------- Questionnaires api endpoints -----------------------------------------------------


  /questionnaires/current:
    get:
      tags: [Questionnaires]
      summary: Get active questionnaire
      description: Retrieve the currently active questionnaire for users to complete
      security:
        - BearerAuth: []
      responses:
        200:
          description: Active questionnaire retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          questionnaire:
                            $ref: '#/components/schemas/Questionnaire'
        404:
          description: No active questionnaire found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires/submit:
    post:
      tags: [Questionnaires]
      summary: Submit questionnaire response
      description: Submit responses to a questionnaire and receive score, category, and recommendations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireSubmissionRequest'
            example:
              questionnaireId: "64f8a1b2c3d4e5f6789012ab"
              responses:
                - questionId: "64f8a1b2c3d4e5f6789012ac"
                  answer: "Sometimes"
                - questionId: "64f8a1b2c3d4e5f6789012ad"
                  answer: 3
                - questionId: "64f8a1b2c3d4e5f6789012ae"
                  answer: "I feel overwhelmed with work"
      responses:
        201:
          description: Questionnaire submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          response:
                            $ref: '#/components/schemas/QuestionnaireResponse'
                          recommendations:
                            type: array
                            items:
                              type: string
                            example: ["Try guided meditation sessions", "Consider talking to friends or family", "Establish a regular sleep schedule"]
                      message:
                        type: string
                        example: "Questionnaire submitted successfully"
        400:
          description: Validation error - Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Questionnaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires/my-responses:
    get:
      tags: [Questionnaires]
      summary: Get user's questionnaire history
      description: Retrieve the authenticated user's questionnaire response history
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of responses per page (max 20)
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
      responses:
        200:
          description: Questionnaire responses retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          responses:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/QuestionnaireResponse'
                                - type: object
                                  properties:
                                    questionnaire:
                                      type: object
                                      properties:
                                        _id:
                                          type: string
                                        title:
                                          type: string
                                          example: "Mental Health Assessment"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires:
    post:
      tags: [Questionnaires]
      summary: Create questionnaire (Admin only)
      description: Create a new questionnaire and automatically deactivate the previous active one. Requires admin or superadmin role.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionnaireRequest'
            example:
              title: "Mental Health Assessment v2"
              description: "Updated mental health questionnaire with new questions"
              questions:
                - text: "How often do you feel anxious?"
                  type: "multiple-choice"
                  options: ["Never", "Sometimes", "Often", "Always"]
                  required: true
                - text: "On a scale of 1-5, how would you rate your overall mood?"
                  type: "rating"
                  required: true
                - text: "Is there anything specific that's been bothering you lately?"
                  type: "text"
                  required: false
      responses:
        201:
          description: Questionnaire created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          questionnaire:
                            $ref: '#/components/schemas/Questionnaire'
                      message:
                        type: string
                        example: "Questionnaire created successfully"
        400:
          description: Validation error - Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



# ----------------------------------------------------- Music api endpoints -----------------------------------------------------


  /music/categories:
    get:
      tags: [Music]
      summary: Get all music categories
      responses:
        200:
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/MusicCategory'
                      message:
                        type: string
                        example: Categories retrieved successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Music]
      summary: Create music category (Admin/Superadmin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, thumbnail]
              properties:
                name:
                  type: string
                thumbnail:
                  type: string
                  format: binary
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          category:
                            $ref: '#/components/schemas/MusicCategory'
                      message:
                        type: string
                        example: Category created successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /music/categories/{id}:
    put:
      tags: [Music]
      summary: Update music category (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                thumbnail:
                  type: string
                  format: binary
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          category:
                            $ref: '#/components/schemas/MusicCategory'
                      message:
                        type: string
                        example: Category updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Music]
      summary: Delete music category (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category and its music deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /music/categories/{categoryId}/music:
    post:
      tags: [Music]
      summary: Add music to category (external URL)
      description: Provide an external `audioUrl` (e.g., SoundHelix) instead of uploading audio
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, audioUrl]
              properties:
                title:
                  type: string
                genre:
                  type: string
                audioUrl:
                  type: string
                  format: uri
                  example: https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3
      responses:
        201:
          description: Music added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          music:
                            $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Music added successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    /music/categories/{categoryId}/music:
    get:
      tags: [Music]
      summary: Get music by category (public)
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
        - name: includeInactive
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Music retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          musics:
                            type: array
                            items:
                              $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Music retrieved successfully
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Music]
      summary: Add music to category (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, audio]
              properties:
                title:
                  type: string
                genre:
                  type: string
                audio:
                  type: string
                  format: binary
      responses:
        201:
          description: Music added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          music:
                            $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Music added successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /music/categories/{categoryId}/music/bulk:
    post:
      tags: [Music]
      summary: Bulk add music via external URLs (Admin/Superadmin)
      description: Send payload array of items with title, optional genre, and audioUrl
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [payload]
              properties:
                payload:
                  type: array
                  items:
                    type: object
                    required: [title, audioUrl]
                    properties:
                      title:
                        type: string
                      genre:
                        type: string
                      audioUrl:
                        type: string
                        format: uri
                        example: https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3
      responses:
        201:
          description: Bulk music uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          musics:
                            type: array
                            items:
                              $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Bulk music uploaded successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /music/music/{id}:
    put:
      tags: [Music]
      summary: Update music (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                genre:
                  type: string
                audio:
                  type: string
                  format: binary
      responses:
        200:
          description: Music updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          music:
                            $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Music updated successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Music]
      summary: Delete music (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Music deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Music not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /music/music/{id}/status:
    patch:
      tags: [Music]
      summary: Set music status (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isActive]
              properties:
                isActive:
                  type: boolean
      responses:
        200:
          description: Music status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          music:
                            $ref: '#/components/schemas/Music'
                      message:
                        type: string
                        example: Music status updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Music not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



# ----------------------------------------------------- Podcasts api endpoints -----------------------------------------------------


  /podcasts:
    get:
      tags: [Podcasts]
      summary: Get all podcasts (public)
      responses:
        200:
          description: Podcasts retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          podcasts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Podcast'
                      message:
                        type: string
                        example: Podcasts retrieved successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Podcasts]
      summary: Create podcast (Admin/Superadmin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, youtubeLink, thumbnail]
              properties:
                title:
                  type: string
                description:
                  type: string
                time:
                  type: string
                youtubeLink:
                  type: string
                thumbnail:
                  type: string
                  format: binary
      responses:
        201:
          description: Podcast created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          podcast:
                            $ref: '#/components/schemas/Podcast'
                      message:
                        type: string
                        example: Podcast created successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /podcasts/admin:
    get:
      tags: [Podcasts]
      summary: Admin list podcasts
      security:
        - BearerAuth: []
      parameters:
        - name: includeInactive
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Podcasts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /podcasts/{id}:
    put:
      tags: [Podcasts]
      summary: Update podcast (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                time:
                  type: string
                youtubeLink:
                  type: string
                thumbnail:
                  type: string
                  format: binary
      responses:
        200:
          description: Podcast updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Podcasts]
      summary: Delete podcast (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Podcast deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /podcasts/{id}/status:
    patch:
      tags: [Podcasts]
      summary: Set podcast status (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isActive]
              properties:
                isActive:
                  type: boolean
      responses:
        200:
          description: Podcast status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reels:
    get:
      tags: [Reels]
      summary: Get all reels (public)
      responses:
        200:
          description: Reels retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Reels]
      summary: Create reel (Admin/Superadmin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, video]
              properties:
                title:
                  type: string
                description:
                  type: string
                video:
                  type: string
                  format: binary
      responses:
        201:
          description: Reel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'



  /reels/{id}/like:
    post:
      tags: [Reels]
      summary: Like a reel (authenticated)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Reel liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reels/{id}:
    put:
      tags: [Reels]
      summary: Update reel (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                video:
                  type: string
                  format: binary
      responses:
        200:
          description: Reel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Reels]
      summary: Delete reel (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Reel deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


# ----------------------------------------------------- Users api endpoints -----------------------------------------------------


  /users/admin/list:
    get:
      tags: [Users]
      summary: List users (Admin/Superadmin)
      description: Retrieve users with optional filters by role, active status, and search text
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, superadmin, psychologist]
        - name: isActive
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          pagination:
                            type: object
                            properties:
                              currentPage:
                                type: integer
                              totalPages:
                                type: integer
                              totalItems:
                                type: integer
                      message:
                        type: string
                        example: Users retrieved successfully
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/admin/{id}/status:
    patch:
      tags: [Users]
      summary: Set user active status (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isActive]
              properties:
                isActive:
                  type: boolean
      responses:
        200:
          description: User status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: User status updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/admin/{id}:
    put:
      tags: [Users]
      summary: Update user profile (Admin/Superadmin)
      description: Update general user fields; if the user is a psychologist, optional `psychologist` object updates role-specific fields
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                contact:
                  type: string
                age:
                  type: integer
                profile:
                  type: object
                  properties:
                    avatar:
                      type: string
                    bio:
                      type: string
                    interests:
                      type: array
                      items:
                        type: string
                    emergencyContact:
                      type: object
                      properties:
                        name:
                          type: string
                        phone:
                          type: string
                        relationship:
                          type: string
                psychologist:
                  type: object
                  description: Only used when updating a psychologist user
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: User updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Users]
      summary: Delete user account (Admin/Superadmin)
      description: Permanently delete a user and associated role-specific records (e.g., psychologist profile)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User account deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: User account deleted successfully
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



# ----------------------------------------------------- Support api endpoints -----------------------------------------------------


  # /support:
  #   post:
  #     tags: [Support]
  #     summary: Create support ticket
  #     description: Create a new support ticket for any authenticated user
  #     security:
  #       - BearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             required: [subject, description]
  #             properties:
  #               subject:
  #                 type: string
  #                 maxLength: 200
  #                 example: "Login Issue"
  #               description:
  #                 type: string
  #                 maxLength: 2000
  #                 example: "I am unable to login to my account"
  #               priority:
  #                 type: string
  #                 enum: [low, medium, high, urgent]
  #                 default: medium
  #                 example: "medium"
  #     responses:
  #       201:
  #         description: Support ticket created successfully
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: '#/components/schemas/ApiResponse'
  #                 - type: object
  #                   properties:
  #                     data:
  #                       type: object
  #                       properties:
  #                         support:
  #                           $ref: '#/components/schemas/Support'
  #                     message:
  #                       type: string
  #                       example: "Support ticket created successfully"
  #       400:
  #         description: Validation error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  #       401:
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'

  # /support/my-tickets:
  #   get:
  #     tags: [Support]
  #     summary: Get my support tickets
  #     description: Retrieve support tickets created by the authenticated user
  #     security:
  #       - BearerAuth: []
  #     parameters:
  #       - name: status
  #         in: query
  #         schema:
  #           type: string
  #           enum: [open, inprogress, resolved]
  #       - name: page
  #         in: query
  #         schema:
  #           type: integer
  #           default: 1
  #           minimum: 1
  #       - name: limit
  #         in: query
  #         schema:
  #           type: integer
  #           default: 10
  #           minimum: 1
  #           maximum: 50
  #     responses:
  #       200:
  #         description: Support tickets retrieved successfully
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: '#/components/schemas/ApiResponse'
  #                 - type: object
  #                   properties:
  #                     data:
  #                       type: object
  #                       properties:
  #                         supports:
  #                           type: array
  #                           items:
  #                             $ref: '#/components/schemas/Support'
  #                         pagination:
  #                           type: object
  #                           properties:
  #                             current:
  #                               type: integer
  #                             total:
  #                               type: integer
  #                             count:
  #                               type: integer
  #                     message:
  #                       type: string
  #                       example: "Support tickets retrieved successfully"
  #       401:
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'

  
  /support:
    post:
      tags: [Support]
      summary: Create support ticket
      description: Create a new support ticket for any authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [subject, description]
              properties:
                subject:
                  type: string
                  maxLength: 200
                  example: "Login Issue"
                description:
                  type: string
                  maxLength: 2000
                  example: "I am unable to login to my account"
      responses:
        201:
          description: Support ticket created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support ticket created successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/my-tickets:
    get:
      tags: [Support]
      summary: Get my support tickets
      description: Retrieve support tickets created by the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, inprogress, resolved]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          description: Support tickets retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          supports:
                            type: array
                            items:
                              $ref: '#/components/schemas/Support'
                          pagination:
                            type: object
                            properties:
                              current:
                                type: integer
                              total:
                                type: integer
                              count:
                                type: integer
                      message:
                        type: string
                        example: "Support tickets retrieved successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /support/{id}:
    get:
      tags: [Support]
      summary: Get support ticket by ID
      description: Get a specific support ticket (users can only see their own tickets)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Support ticket retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support ticket retrieved successfully"
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Support]
      summary: Update my support ticket
      description: Update own support ticket (users can only update their own tickets)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  maxLength: 200
                description:
                  type: string
                  maxLength: 2000
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
      responses:
        200:
          description: Support ticket updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support ticket updated successfully"
        400:
          description: Cannot update resolved tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Support]
      summary: Delete my support ticket
      description: Delete own support ticket (users can only delete their own tickets)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Support ticket deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Support ticket deleted successfully"
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/admin/all:
    get:
      tags: [Support]
      summary: Get all support tickets (Admin/Superadmin)
      description: Retrieve all support tickets with filtering options for admins
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, inprogress, resolved]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: assignedTo
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          description: Support tickets retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          supports:
                            type: array
                            items:
                              $ref: '#/components/schemas/Support'
                          pagination:
                            type: object
                            properties:
                              current:
                                type: integer
                              total:
                                type: integer
                              count:
                                type: integer
                      message:
                        type: string
                        example: "Support tickets retrieved successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/{id}/status:
    patch:
      tags: [Support]
      summary: Update support ticket status (Admin/Superadmin)
      description: Update support ticket status and add admin notes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [open, inprogress, resolved]
                adminNotes:
                  type: string
                  maxLength: 1000
      responses:
        200:
          description: Support status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support status updated successfully"
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/{id}/assign:
    patch:
      tags: [Support]
      summary: Assign support ticket (Admin/Superadmin)
      description: Assign support ticket to a specific user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assignedTo:
                  type: string
                  description: User ID to assign ticket to (null to unassign)
      responses:
        200:
          description: Support ticket assigned successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support ticket assigned successfully"
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/{id}/admin-update:
    put:
      tags: [Support]
      summary: Admin update support ticket
      description: Admin can update any support ticket with full permissions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  maxLength: 200
                description:
                  type: string
                  maxLength: 2000
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                status:
                  type: string
                  enum: [open, inprogress, resolved]
                adminNotes:
                  type: string
                  maxLength: 1000
                assignedTo:
                  type: string
      responses:
        200:
          description: Support ticket updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          support:
                            $ref: '#/components/schemas/Support'
                      message:
                        type: string
                        example: "Support ticket updated successfully"
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/{id}/admin-delete:
    delete:
      tags: [Support]
      summary: Admin delete support ticket
      description: Admin can delete any support ticket
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Support ticket deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Support ticket deleted successfully"
        404:
          description: Support ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /support/admin/stats:
    get:
      tags: [Support]
      summary: Get support statistics (Admin/Superadmin)
      description: Get support ticket statistics and metrics for dashboard
      security:
        - BearerAuth: []
      responses:
        200:
          description: Support statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalTickets:
                            type: integer
                          resolvedTickets:
                            type: integer
                          openTickets:
                            type: integer
                          inProgressTickets:
                            type: integer
                          statusBreakdown:
                            type: array
                            items:
                              type: object
                              properties:
                                _id:
                                  type: string
                                count:
                                  type: integer
                          priorityBreakdown:
                            type: array
                            items:
                              type: object
                              properties:
                                _id:
                                  type: string
                                count:
                                  type: integer
                      message:
                        type: string
                        example: "Support statistics retrieved successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-panel:
    post:
      tags: [User Panel]
      summary: Create user-panel account
      description: Create a new user-panel account (Admin/Superadmin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, contact, age, modules]
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "SecurePass123!"
                contact:
                  type: string
                  pattern: "^\\+?[1-9]\\d{1,14}$"
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 13
                  maximum: 120
                  example: 25
                modules:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [name, route]
                    properties:
                      name:
                        type: string
                        example: "Dashboard"
                      route:
                        type: string
                        example: "/dashboard"
      responses:
        201:
          description: User-panel account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [User Panel]
      summary: Get all user-panel accounts
      description: Retrieve all user-panel accounts with pagination and search (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: User-panel accounts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-panel/modules:
    get:
      tags: [User Panel]
      summary: Get available modules
      description: Get list of all available modules for user-panel accounts (Admin/Superadmin only)
      security:
        - BearerAuth: []
      responses:
        200:
          description: Available modules retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-panel/{id}:
    get:
      tags: [User Panel]
      summary: Get user-panel account by ID
      description: Get a specific user-panel account by ID (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User-panel account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User-panel account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [User Panel]
      summary: Update user-panel account
      description: Update user-panel account details (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "John Smith"
                email:
                  type: string
                  format: email
                  example: "johnsmith@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "NewSecurePass123!"
                contact:
                  type: string
                  pattern: "^\\+?[1-9]\\d{1,14}$"
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 13
                  maximum: 120
                  example: 25
                modules:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [name, route]
                    properties:
                      name:
                        type: string
                        example: "Dashboard"
                      route:
                        type: string
                        example: "/dashboard"
                isActive:
                  type: boolean
                  example: true
      responses:
        200:
          description: User-panel account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User-panel account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [User Panel]
      summary: Delete user-panel account
      description: Delete a user-panel account (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User-panel account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User-panel account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-panel/{id}/modules:
    patch:
      tags: [User Panel]
      summary: Update user-panel modules
      description: Update modules for a user-panel account (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [modules]
              properties:
                modules:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [name, route]
                    properties:
                      name:
                        type: string
                        example: "Reports"
                      route:
                        type: string
                        example: "/reports"
      responses:
        200:
          description: Modules updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User-panel account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-panel/{id}/toggle-active:
    patch:
      tags: [User Panel]
      summary: Toggle user-panel active status
      description: Toggle active/inactive status of a user-panel account (Admin/Superadmin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Active status toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin/Superadmin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User-panel account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'




# ----------------------------------------------------- polls api endpoints -----------------------------------------------------



  /poll:
    get:
      tags: [Poll]
      summary: Get all public polls
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: visibility
          in: query
          schema:
            type: string
            enum: [public, private]
            default: public
      responses:
        200:
          description: Polls retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          polls:
                            type: array
                            items:
                              $ref: '#/components/schemas/Poll'
                          pagination:
                            type: object
                            properties:
                              current:
                                type: integer
                              total:
                                type: integer
                              count:
                                type: integer

    post:
      tags: [Poll]
      summary: Create new poll (never expires)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question, options]
              properties:
                question:
                  type: string
                  maxLength: 300
                  example: "What is your favorite programming language?"
                options:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    type: string
                    maxLength: 100
                  example: ["JavaScript", "Python", "Java", "C++"]
                visibility:
                  type: string
                  enum: [public, private]
                  default: public
      responses:
        201:
          description: Poll created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /poll/{id}:
    get:
      tags: [Poll]
      summary: Get poll by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Poll retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Poll]
      summary: Update my poll
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  maxLength: 300
                options:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    type: string
                visibility:
                  type: string
                  enum: [public, private]
                isActive:
                  type: boolean
      responses:
        200:
          description: Poll updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        400:
          description: Cannot modify question or options after votes are cast
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Poll]
      summary: Delete my poll
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Poll deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /poll/my/polls:
    get:
      tags: [Poll]
      summary: Get my polls
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: My polls retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          polls:
                            type: array
                            items:
                              $ref: '#/components/schemas/Poll'
                          pagination:
                            type: object
                            properties:
                              current:
                                type: integer
                              total:
                                type: integer
                              count:
                                type: integer

  /poll/{id}/vote:
    post:
      tags: [Poll]
      summary: Vote on poll (polls never expire)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [optionIndex]
              properties:
                optionIndex:
                  type: integer
                  minimum: 0
                  example: 0
                  description: "Array index of the option (0 for first option, 1 for second, etc.)"
      responses:
        200:
          description: Vote recorded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        400:
          description: Invalid option index or user already voted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Poll]
      summary: Remove vote from poll
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Vote removed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        400:
          description: No vote found to remove
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /poll/admin/all:
    get:
      tags: [Poll]
      summary: Get all polls (Admin/Superadmin)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: includeDeleted
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Admin polls retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          polls:
                            type: array
                            items:
                              $ref: '#/components/schemas/Poll'
                          pagination:
                            type: object
                            properties:
                              current:
                                type: integer
                              total:
                                type: integer
                              count:
                                type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /poll/{id}/admin-update:
    put:
      tags: [Poll]
      summary: Admin update poll (full control)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  maxLength: 300
                options:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    type: string
                isActive:
                  type: boolean
                isDeleted:
                  type: boolean
                visibility:
                  type: string
                  enum: [public, private]
      responses:
        200:
          description: Poll updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          poll:
                            $ref: '#/components/schemas/Poll'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /poll/{id}/admin-delete:
    delete:
      tags: [Poll]
      summary: Admin delete poll (any poll)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Poll deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Poll not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


# ----------------------------------------------------- post apis endpoints -----------------------------------------------------
    
  /post:
    get:
      tags: [Post]
      summary: Get all posts
      description: Retrieve posts with pagination and filtering options
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: moodTag
          in: query
          schema:
            type: string
            enum: [Crying, Sad, Exhausted, Calm, Happy, Chearful, Energetic, Confused, Anxious]
        - name: author
          in: query
          schema:
            type: string
            description: Filter by author ID
      responses:
        200:
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          posts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Post'
                          pagination:
                            type: object
                            properties:
                              currentPage:
                                type: integer
                              totalPages:
                                type: integer
                              totalItems:
                                type: integer
                      message:
                        type: string
                        example: "Posts retrieved successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Post]
      summary: Create new post
      description: Create a new social media post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                  maxLength: 200
                  example: "Feeling great today!"
                content:
                  type: string
                  maxLength: 5000
                  example: "Had an amazing day at work and feeling really positive about life."
                moodTag:
                  type: string
                  enum: [Crying, Sad, Exhausted, Calm, Happy, Chearful, Energetic, Confused, Anxious]
                  example: "Happy"
                isAnonymous:
                  type: boolean
                  default: false
                  example: false
                tags:
                  type: array
                  items:
                    type: string
                  example: ["motivation", "positivity"]
                visibility:
                  type: string
                  enum: [public, private, friends]
                  default: public
                  example: "public"
                postImage:
                  type: string
                  format: binary
                  description: Optional image file for the post
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
                      message:
                        type: string
                        example: "Post created successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{id}:
    get:
      tags: [Post]
      summary: Get post by ID
      description: Retrieve a specific post with comments
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
                      message:
                        type: string
                        example: "Post retrieved successfully"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Post]
      summary: Update my post
      description: Update own post (users can only update their own posts)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                content:
                  type: string
                  maxLength: 5000
                moodTag:
                  type: string
                  enum: [Crying, Sad, Exhausted, Calm, Happy, Chearful, Energetic, Confused, Anxious]
                visibility:
                  type: string
                  enum: [public, private, friends]
                postImage:
                  type: string
                  format: binary
                  description: New image file to replace existing
      responses:
        200:
          description: Post updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
                      message:
                        type: string
                        example: "Post updated successfully"
        403:
          description: Access denied - Not authorized to update this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Post]
      summary: Delete post
      description: Delete own post (users can only delete their own posts, admins can delete any post)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Post deleted successfully"
        403:
          description: Access denied - Not authorized to delete this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{id}/like:
    post:
      tags: [Post]
      summary: Like/Unlike post
      description: Toggle like on a post (removes unlike if exists, toggles like status)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Post like status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          liked:
                            type: boolean
                            description: Whether the post is now liked by the user
                          likesCount:
                            type: integer
                            description: Current total likes count
                          unlikesCount:
                            type: integer
                            description: Current total unlikes count
                      message:
                        type: string
                        example: "Post liked"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{id}/comments:
    get:
      tags: [Post]
      summary: Get post comments
      description: Retrieve comments for a specific post with pagination
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        200:
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: '#/components/schemas/Comment'
                          pagination:
                            type: object
                            properties:
                              currentPage:
                                type: integer
                              totalPages:
                                type: integer
                              totalItems:
                                type: integer
                      message:
                        type: string
                        example: "Comments retrieved successfully"
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Post]
      summary: Add comment to post
      description: Add a new comment to a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  example: "Great post! Thanks for sharing."
                isAnonymous:
                  type: boolean
                  default: false
                  example: false
      responses:
        201:
          description: Comment added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comment:
                            $ref: '#/components/schemas/Comment'
                      message:
                        type: string
                        example: "Comment added successfully"
        400:
          description: Comment content is required or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



tags:
  - name: Auth
    description: Authentication and authorization
  - name: Users
    description: User management and administration
  - name: Psychologists
    description: Psychologist profiles and management
  - name: Moods
    description: Mood logging and tracking
  - name: Feelings
    description: Daily feeling submissions
  - name: Questionnaires
    description: Mental health assessments
  - name: Music
    description: Music categories and tracks management
  - name: Podcasts
    description: Podcast management
  - name: Reels
    description: Reels categories and videos management
  - name: Support
    description: Support ticket management system
  - name: User Panel
    description: User-panel account management with module permissions
  - name: Poll
    description: Poll management system for voting and surveys
  - name: Post
    description: Post management system for social content sharing

