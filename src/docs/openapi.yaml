openapi: 3.0.3
info:
  title: KidManTree Backend API
  description: Comprehensive backend API for a mental health and content platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@mentalhealthplatform.com

servers:
  - url: https://kidmantree-backend-1.onrender.com/api
    description: fixing
  - url: https://kidmantree-backend-g2la.onrender.com/api
    description: Development server 
  - url: https://api.manmitr.com/api
    description: Production server
  - url: http://localhost:8000/api
    description: local server
    

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        contact:
          type: string
        age:
          type: integer
        role:
          type: string
          enum: [user, admin, superadmin, psychologist]
        isEmailVerified:
          type: boolean
        isContactVerified:
          type: boolean
        isActive:
          type: boolean
        profile:
          type: object
          properties:
            avatar:
              type: string
            bio:
              type: string
            interests:
              type: array
              items:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        moodTag:
          type: string
          enum: [Bad, NotGreat, OK, Happy, Joyful]
        isAnonymous:
          type: boolean
        likesCount:
          type: integer
        unlikesCount:
          type: integer
        commentsCount:
          type: integer
        visibility:
          type: string
          enum: [public, private, friends]
        createdAt:
          type: string
          format: date-time

    MoodLog:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        emoji:
          type: string
        scale:
          type: integer
          minimum: 1
          maximum: 5
        emotions:
          type: array
          items:
            type: string
        notes:
          type: string
        triggers:
          type: array
          items:
            type: string
        logDate:
          type: string
          format: date-time

    FeelingToday:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        feeling:
          type: string
          enum: [excellent, good, okay, not-great, unsatisfied]
        emoji:
          type: string
        notes:
          type: string
        date:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Psychologist:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        degree:
          type: string
        experience:
          type: integer
        about:
          type: string
        rating:
          type: number
        specializations:
          type: array
          items:
            type: string
            enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
        schedule:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
                enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
              startTime:
                type: string
              endTime:
                type: string
              isAvailable:
                type: boolean
        isActive:
          type: boolean
        profileImage:
          type: string
        languages:
          type: array
          items:
            type: string
        sessionRate:
          type: number
        totalSessions:
          type: integer
        reviews:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              rating:
                type: integer
                minimum: 1
                maximum: 5
              comment:
                type: string
              createdAt:
                type: string
                format: date-time
        averageRating:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Appointment:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        psychologist:
          $ref: '#/components/schemas/Psychologist'
        dateTime:
          type: string
          format: date-time
        duration:
          type: integer
        status:
          type: string
          enum: [scheduled, completed, cancelled, no-show]
        notes:
          type: string

    Poll:
      type: object
      properties:
        _id:
          type: string
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              votes:
                type: array
        creator:
          $ref: '#/components/schemas/User'
        totalVotes:
          type: integer
        expiresAt:
          type: string
          format: date-time

    Question:
      type: object
      properties:
        _id:
          type: string
          description: Question ID
        text:
          type: string
          description: Question text
          example: "How often do you feel anxious?"
        type:
          type: string
          enum: [multiple-choice, rating, text]
          default: multiple-choice
          description: Type of question
        options:
          type: array
          items:
            type: string
          description: Available options for multiple-choice questions
          example: ["Never", "Sometimes", "Often", "Always"]
        required:
          type: boolean
          default: true
          description: Whether the question is required

    Questionnaire:
      type: object
      properties:
        _id:
          type: string
          description: Questionnaire ID
        title:
          type: string
          default: "Mental Health Assessment"
          description: Questionnaire title
          example: "Mental Health Assessment"
        description:
          type: string
          default: "Please answer the following questions to help us understand your current mental health status."
          description: Questionnaire description
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          description: List of questions
        isActive:
          type: boolean
          default: true
          description: Whether the questionnaire is currently active
        version:
          type: number
          default: 1
          description: Questionnaire version
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuestionnaireResponseItem:
      type: object
      properties:
        questionId:
          type: string
          description: Reference to the question ID
          example: "64f8a1b2c3d4e5f6789012ab"
        answer:
          oneOf:
            - type: string
            - type: number
            - type: boolean
          description: Answer to the question (can be string, number, or boolean)
          example: "Sometimes"

    QuestionnaireResponse:
      type: object
      properties:
        _id:
          type: string
          description: Response ID
        user:
          type: string
          description: User ID who submitted the response
        questionnaire:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Questionnaire'
          description: Reference to the questionnaire (can be populated)
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireResponseItem'
          description: Array of question responses
        score:
          type: number
          description: Calculated score from responses
          example: 12
        category:
          type: string
          enum: [low, moderate, high, severe]
          description: Risk category based on score
          example: "moderate"
        recommendations:
          type: array
          items:
            type: string
          description: Recommended actions based on the assessment
          example: ["Try guided meditation sessions", "Consider talking to friends or family"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuestionnaireSubmissionRequest:
      type: object
      required: [questionnaireId, responses]
      properties:
        questionnaireId:
          type: string
          description: ID of the questionnaire being submitted
          example: "64f8a1b2c3d4e5f6789012ab"
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireResponseItem'
          description: Array of question responses

    CreateQuestionnaireRequest:
      type: object
      required: [title, questions]
      properties:
        title:
          type: string
          description: Questionnaire title
          example: "Mental Health Assessment"
        description:
          type: string
          description: Questionnaire description
          example: "Please answer the following questions to help us understand your current mental health status."
        questions:
          type: array
          items:
            type: object
            required: [text]
            properties:
              text:
                type: string
                description: Question text
                example: "How often do you feel anxious?"
              type:
                type: string
                enum: [multiple-choice, rating, text]
                default: multiple-choice
              options:
                type: array
                items:
                  type: string
                description: Options for multiple-choice questions
                example: ["Never", "Sometimes", "Often", "Always"]
              required:
                type: boolean
                default: true

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        message:
          type: string
        errors:
          type: array
          items:
            type: object
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        data:
          type: object
          nullable: true
          example: null
        message:
          type: string
        errors:
          type: array
          items:
            type: object
        timestamp:
          type: string
          format: date-time

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, contact, age]
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "Password123!"
                contact:
                  type: string
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 13
                  example: 25
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'

  /auth/verify-contact-otp:
    post:
      tags: [Auth]
      summary: Verify contact OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: Contact verified successfully
        400:
          description: Invalid or expired OTP

  /auth/verify-email-otp:
    post:
      tags: [Auth]
      summary: Verify email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: Email verified successfully
        400:
          description: Invalid or expired OTP

  /auth/resend-otp:
    post:
      tags: [Auth]
      summary: Resend OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                  enum: [email, contact]
                  example: "email"
                tempToken:
                  type: string
                  example: "temp-token-uuid"
      responses:
        200:
          description: OTP resent successfully
        400:
          description: Invalid request

  /auth/parent/init:
    post:
      tags: [Auth]
      summary: Initialize parent consent verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [parentEmail, parentContact, tempToken]
              properties:
                parentEmail:
                  type: string
                  format: email
                  example: "parent@example.com"
                parentContact:
                  type: string
                  example: "+1234567890"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent verification initiated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          parentEmail:
                            type: string
                            example: "parent@example.com"
                          parentContact:
                            type: string
                            example: "+123****890"
                          tempToken:
                            type: string
                            example: "temp_token_12345"
        400:
          description: Invalid request or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/verify-email-otp:
    post:
      tags: [Auth]
      summary: Verify parent email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp, tempToken]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent email verification successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Parent email verified successfully"
        400:
          description: Invalid OTP or verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/verify-contact-otp:
    post:
      tags: [Auth]
      summary: Verify parent contact OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [otp, tempToken]
              properties:
                otp:
                  type: string
                  example: "123456"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: Parent contact verification successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - type: object
                            properties:
                              token:
                                type: string
                                example: "jwt_token_here"
                              user:
                                $ref: '#/components/schemas/User'
                              accountActivated:
                                type: boolean
                                example: true
                              autoLogin:
                                type: boolean
                                example: true
                          - type: object
                            nullable: true
                      message:
                        type: string
                        examples:
                          account_activated:
                            value: "Parent consent completed. Account activated and logged in successfully."
                          contact_verified:
                            value: "Parent contact verified successfully"
        400:
          description: Invalid OTP or verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/parent/resend-otp:
    post:
      tags: [Auth]
      summary: Resend parent OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, tempToken]
              properties:
                type:
                  type: string
                  enum: [email, contact]
                  example: "email"
                tempToken:
                  type: string
                  example: "temp_token_12345"
      responses:
        200:
          description: OTP resent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        examples:
                          email_resent:
                            value: "Parent email OTP resent successfully"
                          contact_resent:
                            value: "Parent contact OTP resent successfully"
        400:
          description: Invalid request or OTP type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/psychologist/invite:
    post:
      tags: [Auth]
      summary: Invite psychologist (Admin/Superadmin only)
      description: Send an invitation email to a psychologist to join the platform
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "psychologist@example.com"
      responses:
        200:
          description: Psychologist invitation sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          email:
                            type: string
                            example: "psychologist@example.com"
                      message:
                        type: string
                        example: "Psychologist invitation sent successfully"
        400:
          description: Invalid request or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/psychologist/verify-invite:
    get:
      tags: [Auth]
      summary: Get psychologist invite verification page
      description: Display the psychologist registration form (typically used in frontend)
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Invitation token from email
      responses:
        200:
          description: Invitation page loaded successfully
        400:
          description: Invalid or expired invitation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Auth]
      summary: Complete psychologist registration
      description: Complete psychologist account creation using invitation token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Invitation token from email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password, name]
              properties:
                password:
                  type: string
                  format: password
                  example: "SecurePassword123!"
                name:
                  type: string
                  example: "Dr. Jane Smith"
                contact:
                  type: string
                  example: "+1234567890"
                age:
                  type: integer
                  minimum: 18
                  example: 35
                degree:
                  type: string
                  example: "PhD in Clinical Psychology"
                experience:
                  type: integer
                  minimum: 0
                  example: 10
                about:
                  type: string
                  example: "Specialized in anxiety and depression treatment"
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                  example: ["Anxiety", "Depression", "PTSD"]
      responses:
        200:
          description: Psychologist account created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          psychologistProfile:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist account created successfully"
        400:
          description: Invalid request, expired token, or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Auth]
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: "Profile retrieved successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists:
    get:
      tags: [Psychologists]
      summary: Get all psychologists
      description: Retrieve a paginated list of active psychologists with optional filtering
      parameters:
        - name: specialization
          in: query
          description: Filter by specialization
          schema:
            type: string
            enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
        - name: search
          in: query
          description: Search by name or specializations
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of psychologists per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          description: Psychologists retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologists:
                            type: array
                            items:
                              $ref: '#/components/schemas/Psychologist'
                          pagination:
                            type: object
                            properties:
                              currentPage:
                                type: integer
                              totalPages:
                                type: integer
                              totalItems:
                                type: integer
                      message:
                        type: string
                        example: "Psychologists retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Psychologists]
      summary: Create psychologist (Admin/Superadmin only)
      description: Create a psychologist user and profile. Sends login credentials via email. Psychologists log in using the standard `/auth/login` route.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, password, degree, experience]
              properties:
                firstName:
                  type: string
                  example: "Jane"
                lastName:
                  type: string
                  example: "Smith"
                email:
                  type: string
                  format: email
                  example: "jane.smith@example.com"
                password:
                  type: string
                  format: password
                  example: "TempPass@123"
                degree:
                  type: string
                  example: "PhD in Clinical Psychology"
                experience:
                  type: integer
                  minimum: 0
                  example: 10
                about:
                  type: string
                  example: "Specialized in anxiety and depression treatment"
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                  example: ["Anxiety", "Depression"]
                languages:
                  type: array
                  items:
                    type: string
                  example: ["English", "Hindi"]
                sessionRate:
                  type: number
                  minimum: 0
                  example: 150
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                        example: "09:00"
                      endTime:
                        type: string
                        example: "17:00"
                      isAvailable:
                        type: boolean
                        default: true
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                  example: ["English", "Spanish"]
                sessionRate:
                  type: number
                  minimum: 0
                  example: 150
      responses:
        201:
          description: Psychologist user and profile created. Credentials emailed.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist created and credentials emailed"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/{id}:
    get:
      tags: [Psychologists]
      summary: Get psychologist by ID
      description: Retrieve detailed information about a specific psychologist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      responses:
        200:
          description: Psychologist retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist retrieved successfully"
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Psychologists]
      summary: Update psychologist (Admin/Superadmin only)
      description: Update psychologist profile information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                degree:
                  type: string
                experience:
                  type: integer
                  minimum: 0
                about:
                  type: string
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                      endTime:
                        type: string
                      isAvailable:
                        type: boolean
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                sessionRate:
                  type: number
                  minimum: 0
      responses:
        200:
          description: Psychologist updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist updated successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Psychologists]
      summary: Deactivate psychologist (Admin/Superadmin only)
      description: Deactivate a psychologist account and profile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Psychologist ID
      responses:
        200:
          description: Psychologist deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Psychologist deactivated successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin or Superadmin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /psychologists/profile/me:
    get:
      tags: [Psychologists]
      summary: Get my psychologist profile
      description: Retrieve the authenticated psychologist's own profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Psychologist profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Psychologist profile retrieved successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Psychologists]
      summary: Update my psychologist profile
      description: Update the authenticated psychologist's own profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                degree:
                  type: string
                experience:
                  type: integer
                  minimum: 0
                about:
                  type: string
                specializations:
                  type: array
                  items:
                    type: string
                    enum: [Anxiety, Depression, PTSD, Relationships, Family Therapy, Child Psychology, Addiction, Eating Disorders, Sleep Disorders, Stress Management, Grief Counseling, Behavioral Issues]
                schedule:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
                      startTime:
                        type: string
                      endTime:
                        type: string
                      isAvailable:
                        type: boolean
                profileImage:
                  type: string
                languages:
                  type: array
                  items:
                    type: string
                sessionRate:
                  type: number
                  minimum: 0
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          psychologist:
                            $ref: '#/components/schemas/Psychologist'
                      message:
                        type: string
                        example: "Profile updated successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Psychologists]
      summary: Deactivate my psychologist account
      description: Deactivate the authenticated psychologist's own account and profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                      message:
                        type: string
                        example: "Account deactivated successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Psychologist role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Psychologist profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /moods/log:
    post:
      tags: [Moods]
      summary: Log mood entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [emoji, scale]
              properties:
                emoji:
                  type: string
                  example: "😊"
                scale:
                  type: integer
                  minimum: 1
                  maximum: 5
                emotions:
                  type: array
                  items:
                    type: string
                notes:
                  type: string
                triggers:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Mood logged successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          moodLog:
                            $ref: '#/components/schemas/MoodLog'
                      message:
                        type: string
                        example: "Mood logged successfully"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /moods/history:
    get:
      tags: [Moods]
      summary: Get mood history
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for filtering mood logs
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering mood logs
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Number of mood logs to return
          schema:
            type: integer
            default: 30
            minimum: 1
      responses:
        200:
          description: Mood history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          moodLogs:
                            type: array
                            items:
                              $ref: '#/components/schemas/MoodLog'
                      message:
                        type: string
                        example: "Mood history retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feelings/today:
    post:
      tags: [Feelings]
      summary: Submit or update today's feeling
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [feeling, emoji]
              properties:
                feeling:
                  type: string
                  enum: [excellent, good, okay, not-great, unsatisfied]
                  example: "good"
                emoji:
                  type: string
                  example: "😊"
                notes:
                  type: string
                  maxLength: 500
      responses:
        201:
          description: Today's feeling submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Today's feeling submitted"
        200:
          description: Today's feeling updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Today's feeling updated"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Feelings]
      summary: Get today's feeling
      security:
        - BearerAuth: []
      responses:
        200:
          description: Today's feeling retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feeling:
                            oneOf:
                              - $ref: '#/components/schemas/FeelingToday'
                              - type: null
                          hasSubmittedToday:
                            type: boolean
                      message:
                        type: string
                        example: "Today's feeling retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feelings/history:
    get:
      tags: [Feelings]
      summary: Get feeling history
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of feelings to return
          schema:
            type: integer
            default: 30
            minimum: 1
      responses:
        200:
          description: Feeling history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feelings:
                            type: array
                            items:
                              $ref: '#/components/schemas/FeelingToday'
                      message:
                        type: string
                        example: "Feeling history retrieved successfully"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires/current:
    get:
      tags: [Questionnaires]
      summary: Get active questionnaire
      description: Retrieve the currently active questionnaire for users to complete
      security:
        - BearerAuth: []
      responses:
        200:
          description: Active questionnaire retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          questionnaire:
                            $ref: '#/components/schemas/Questionnaire'
        404:
          description: No active questionnaire found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires/submit:
    post:
      tags: [Questionnaires]
      summary: Submit questionnaire response
      description: Submit responses to a questionnaire and receive score, category, and recommendations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireSubmissionRequest'
            example:
              questionnaireId: "64f8a1b2c3d4e5f6789012ab"
              responses:
                - questionId: "64f8a1b2c3d4e5f6789012ac"
                  answer: "Sometimes"
                - questionId: "64f8a1b2c3d4e5f6789012ad"
                  answer: 3
                - questionId: "64f8a1b2c3d4e5f6789012ae"
                  answer: "I feel overwhelmed with work"
      responses:
        201:
          description: Questionnaire submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          response:
                            $ref: '#/components/schemas/QuestionnaireResponse'
                          recommendations:
                            type: array
                            items:
                              type: string
                            example: ["Try guided meditation sessions", "Consider talking to friends or family", "Establish a regular sleep schedule"]
                      message:
                        type: string
                        example: "Questionnaire submitted successfully"
        400:
          description: Validation error - Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Questionnaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires/my-responses:
    get:
      tags: [Questionnaires]
      summary: Get user's questionnaire history
      description: Retrieve the authenticated user's questionnaire response history
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of responses per page (max 20)
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
      responses:
        200:
          description: Questionnaire responses retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          responses:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/QuestionnaireResponse'
                                - type: object
                                  properties:
                                    questionnaire:
                                      type: object
                                      properties:
                                        _id:
                                          type: string
                                        title:
                                          type: string
                                          example: "Mental Health Assessment"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questionnaires:
    post:
      tags: [Questionnaires]
      summary: Create questionnaire (Admin only)
      description: Create a new questionnaire and automatically deactivate the previous active one. Requires admin or superadmin role.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionnaireRequest'
            example:
              title: "Mental Health Assessment v2"
              description: "Updated mental health questionnaire with new questions"
              questions:
                - text: "How often do you feel anxious?"
                  type: "multiple-choice"
                  options: ["Never", "Sometimes", "Often", "Always"]
                  required: true
                - text: "On a scale of 1-5, how would you rate your overall mood?"
                  type: "rating"
                  required: true
                - text: "Is there anything specific that's been bothering you lately?"
                  type: "text"
                  required: false
      responses:
        201:
          description: Questionnaire created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          questionnaire:
                            $ref: '#/components/schemas/Questionnaire'
                      message:
                        type: string
                        example: "Questionnaire created successfully"
        400:
          description: Validation error - Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Insufficient permissions (admin role required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Auth
    description: Authentication and authorization
  - name: Psychologists
    description: Psychologist profiles and management
  - name: Moods
    description: Mood logging and tracking
  - name: Feelings
    description: Daily feeling submissions
  - name: Questionnaires
    description: Mental health assessments